/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: JasonKills (https://sketchfab.com/ITZCLIX2)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/jason-voorhees-beartrap-in-animation-48ee830959d746cea81be01817fbef3d
Title: Jason Voorhees BearTrap In Animation
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import BeartrapScene from './../assets/3d/jason_voorhees_beartrap_in_animation.glb'
import { a } from '@react-spring/three'
const Beartrap = ({ isRotating, setIsRotating, ...props }) => {
  const group = useRef()
  const { gl, viewport } = useThree()


  const lastX = useRef(0);
  const dampingFactor = 0.95;

  const [keysPressed, setKeysPressed] = useState({});
  const rotationSpeed = 0.03;



  const { nodes, materials, animations } = useGLTF(BeartrapScene)
  const { actions } = useAnimations(animations, group)

  // Event listeners for key press and release
  useEffect(() => {
    const handleKeyDown = (event) => {
      setKeysPressed((prev) => ({ ...prev, [event.key]: true }));
    };

    const handleKeyUp = (event) => {
      setKeysPressed((prev) => ({ ...prev, [event.key]: false }));
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Rotate the model based on keys pressed
  useFrame(() => {
    if (!group.current) return;

    const rotation = group.current.rotation;

    // Up (ArrowUp) or W
    if (keysPressed.ArrowUp || keysPressed.w) {
      rotation.x -= rotationSpeed;
    }

    // Down (ArrowDown) or S
    if (keysPressed.ArrowDown || keysPressed.s) {
      rotation.x += rotationSpeed;
    }

    // Left (ArrowLeft) or A
    if (keysPressed.ArrowLeft || keysPressed.a) {
      rotation.y += rotationSpeed;
    }

    // Right (ArrowRight) or D
    if (keysPressed.ArrowRight || keysPressed.d) {
      rotation.y -= rotationSpeed;
    }
  });


  return (
    <a.group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="d92894112e2f49b9b878561825a4dc5efbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Object_4">
                  <primitive object={nodes._rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.material_0}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <skinnedMesh
                    name="Object_9"
                    geometry={nodes.Object_9.geometry}
                    material={materials.material_1}
                    skeleton={nodes.Object_9.skeleton}
                  />
                  <skinnedMesh
                    name="Object_11"
                    geometry={nodes.Object_11.geometry}
                    material={materials.material_2}
                    skeleton={nodes.Object_11.skeleton}
                  />
                  <skinnedMesh
                    name="Object_13"
                    geometry={nodes.Object_13.geometry}
                    material={materials.material_3}
                    skeleton={nodes.Object_13.skeleton}
                  />
                  <skinnedMesh
                    name="Object_15"
                    geometry={nodes.Object_15.geometry}
                    material={materials.material_4}
                    skeleton={nodes.Object_15.skeleton}
                  />
                  <skinnedMesh
                    name="Object_17"
                    geometry={nodes.Object_17.geometry}
                    material={materials.material_5}
                    skeleton={nodes.Object_17.skeleton}
                  />
                  <skinnedMesh
                    name="Object_19"
                    geometry={nodes.Object_19.geometry}
                    material={materials.jason_machete}
                    skeleton={nodes.Object_19.skeleton}
                  />
                  <group name="Object_6" />
                  <group name="Object_8" />
                  <group name="Object_10" />
                  <group name="Object_12" />
                  <group name="Object_14" />
                  <group name="Object_16" />
                  <group name="Object_18" />
                  <group name="0000_Jason_Base">
                    <group name="Skin" />
                  </group>
                  <group name="0001_Jason_Base">
                    <group name="Skin_2" />
                  </group>
                  <group name="0002_Jason_Base">
                    <group name="Skin_3" />
                  </group>
                  <group name="0003_Jason_Base">
                    <group name="Skin_4" />
                  </group>
                  <group name="0004_Jason_Base">
                    <group name="Skin_5" />
                  </group>
                  <group name="0005_Jason_Base">
                    <group name="Skin_6" />
                  </group>
                  <group name="a_weapons_machete_01_2">
                    <group name="Skin_7" />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  )
}

useGLTF.preload('/jason_voorhees_beartrap_in_animation.glb')
export default Beartrap